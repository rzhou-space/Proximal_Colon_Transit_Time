#!/usr/bin/env python
# coding: utf-8

import glob, os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'widget')


def read_txt(direction, diff_constant):
    """
    This function reads multiple .txt files (multiple replicates) 
    containing the transit time with the same diffusion constant. 
    Extract then the transit time (turtle_die_tick) from each .txt file 
    as a numpy array. A dictionary with the diffusion constant as key and 
    list of all transit time arrays as item will be returned.
    
    direction: String. The path to the folder with all .txt files with the 
    same diffusion constant.
    diff_constant: String. The diffsion constant applied to generate the 
    .txt files (represent multiple replicates). 
    """
    # Find all the .txt files under given direction.
    os.chdir(direction)
    data = []
    for file in glob.glob("*.txt"):
        data.append(file)
    
    # Extract transit time as numpy array and summary together in a list.
    all_transit_time = []
    heading_rows = [0]
    for docu in data:
        DF_onetrial = pd.read_csv(docu, sep = ","
                                  , skiprows = lambda x: x in heading_rows)
        transit_time = np.array(DF_onetrial.loc[:, "  turtle_die_tick " ])
        all_transit_time.append(transit_time)
    
    return {diff_constant: all_transit_time}




def mean_transit_time(all_transit_dict):
    """
    A dictionary containing all considered diffusion constants and 
    their corresponding modeling replicates results should be given. For
    each diffusion constant, mean transit time of each "replicate" is
    calculated. A dictionary with diffusion constants as key and a list
    of mean transit time as item is returned.
    
    all_transit_dict: dictionary containing multiple modeling results with
    different diffusion constants and repeats.
    
    """
    mean_transit_time = {}
    for key in all_transit_dict.keys():
        mean = []
        for tt_list in all_transit_dict[key]:
            mean.append(np.mean(tt_list))
        mean_transit_time[key] = mean
    return mean_transit_time



def transit_time_summary(Vout_list, D_list):
    """
    This function summarises all mean transit time data generated by the 
    function mean_transit_time for all Vout values and all D vlaues. 
    The results are hierachisch structured as embedded dictionaries with 
    Vout as keys and mean value vectors for all diffusion constans as 
    values. 
    Final dictionary will be returned.
    
    Vout_list: a list of considered Vout values
    D_list: a list of considered diffusion constants.
    """
    all_Vout_transit = {}
    
    for Vout in Vout_list:
        all_diff_transit = {}
        
        for D in D_list:
            # Change direction if the files are stored somewhere else!
            direction = "F:\Geothe Universit√§t\WS22_23-SS23\Praktikum_AK_Koch\CorrelationData\Vout="                        + str(Vout) + "\Diff=" + str(D)
            #diff_constant = "D=" + str(D)
            diff_constant = D
            diff_data = read_txt(direction, diff_constant)
            all_diff_transit.update(diff_data)

        key = "Vout=" + str(Vout)
        mean_tt = {key: mean_transit_time(all_diff_transit)}
    
        all_Vout_transit.update(mean_tt)
    
    return all_Vout_transit




def mean_transit_time_lineplot(mean_tt_dict):
    """
    This function plots the results generated by the function transit_time_
    summary. 
    For each Vout, the mean values of data for all diffusion constants 
    are presented in plots.
    A dashed line marks the value reported by Arhan et al. for comparison.

    mean_tt_dict: the dictionary generated by function transit_time_summary.
    
    """
    # Turn the dictionary into DataFrame.
    mean_tt_DF = pd.DataFrame.from_dict(mean_tt_dict)
    all_Vout = mean_tt_DF.columns
    
    # Generating plot.
    plt.figure()
    
    for Vout in all_Vout:
        current_DF = pd.DataFrame.from_dict(mean_tt_dict[Vout])
        current_mean_DF = current_DF.mean()
        plt.plot(current_mean_DF, "-o", label = Vout)
    
    # Add a lines for the transit time collected from different studies.
    plt.axhline(y = 828, color = "k", linestyle = "dashed")
    plt.axhline(y = 678, color = "k", linestyle = "dashed")
    plt.axhline(y = 414, color = "k", linestyle = "dashed")
    plt.axhline(y = 348, color = "k", linestyle = "dashed")
    
    plt.xlabel("Diffusion Constants ($cm^2/min$)")
    plt.ylabel("Mean Transit Time ($min$)")
    #plt.yscale("log", base = 10)
    plt.title("Correlation between Transit Time and Diffusion Constant")
    plt.legend()
    plt.show()
    


all_mean_tt = transit_time_summary([100, 150, 200, 300, 400]
                            , [0.01, 0.015, 0.02, 0.025, 0.03
                               , 0.035, 0.04, 0.045, 0.05, 0.055
                               , 0.06, 0.065, 0.07, 0.075, 0.08, 0.085, 0.09, 0.095
                               , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6])

mean_transit_time_lineplot(all_mean_tt)




